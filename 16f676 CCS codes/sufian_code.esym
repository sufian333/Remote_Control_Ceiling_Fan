D G "buz" 0 20 "PIN_A5"
D G "__PCM__" 0 419 ""5.015""
D G "__DEVICE__" 0 419 "676"
D G "__DATE__" 0 419 ""09-Oct-20""
D G "__TIME__" 0 419 ""00:15:38"" "Standard Header file for the PIC16F676 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 37 "int8" `53 
f B "set_tris_a" 1 37 "void(int8 value)" `52 
v L "value" 1 38 "int8" `55 
f B "set_tris_c" 1 38 "void(int8 value)" `54 
f B "get_tris_a" 1 39 "int8()" `56 
f B "get_tris_c" 1 40 "int8()" `57 
v L "value" 1 41 "int8" `59 
f B "output_a" 1 41 "void(int8 value)" `58 
v L "value" 1 42 "int8" `61 
f B "output_c" 1 42 "void(int8 value)" `60 
f B "input_a" 1 43 "int8()" `62 
f B "input_c" 1 44 "int8()" `63 
f B "input_change_a" 1 45 "int8()" `64 
f B "input_change_c" 1 46 "int8()" `65 
v L "pin" 1 47 "int16" `67 
f B "input" 1 47 "int8(int16 pin)" `66 
v L "pin" 1 48 "int16" `69 
f B "input_state" 1 48 "int8(int16 pin)" `68 
v L "pin" 1 49 "int16" `71 
f B "output_low" 1 49 "void(int16 pin)" `70 
v L "pin" 1 50 "int16" `73 
f B "output_high" 1 50 "void(int16 pin)" `72 
v L "pin" 1 51 "int16" `75 
f B "output_toggle" 1 51 "void(int16 pin)" `74 
v L "pin" 1 52 "int16" `77 
v L "level" 1 52 "int8" `78 
f B "output_bit" 1 52 "void(int16 pin,int8 level)" `76 
v L "pin" 1 53 "int16" `80 
f B "output_float" 1 53 "void(int16 pin)" `79 
v L "pin" 1 54 "int16" `82 
f B "output_drive" 1 54 "void(int16 pin)" `81  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 58 "40"
d G "PIN_A1" 1 59 "41"
d G "PIN_A2" 1 60 "42"
d G "PIN_A3" 1 61 "43"
d G "PIN_A4" 1 62 "44"
d G "PIN_A5" 1 63 "45"
d G "PIN_C0" 1 65 "56"
d G "PIN_C1" 1 66 "57"
d G "PIN_C2" 1 67 "58"
d G "PIN_C3" 1 68 "59"
d G "PIN_C4" 1 69 "60"
d G "PIN_C5" 1 70 "61"
d G "FALSE" 1 73 "0"
d G "TRUE" 1 74 "1"
d G "BYTE" 1 76 "int8"
d G "BOOLEAN" 1 77 "int1"
d G "getc" 1 79 "getch"
d G "fgetc" 1 80 "getch"
d G "getchar" 1 81 "getch"
d G "putc" 1 82 "putchar"
d G "fputc" 1 83 "putchar"
d G "fgets" 1 84 "gets"
d G "fputs" 1 85 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f B "restart_cause" 1 90 "int8()" `83 
f B "reset_cpu" 1 91 "void()" `84 
f B "sleep" 1 92 "void()" `85  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 94 "3"
d G "WDT_TIMEOUT" 1 95 "11"
d G "MCLR_FROM_SLEEP" 1 96 "19"
d G "MCLR_FROM_RUN" 1 97 "27"
d G "NORMAL_POWER_UP" 1 98 "25"
d G "BROWNOUT_RESTART" 1 99 "26"
c L "sleep" 1 3 5 "FUNCTION"
v L "mode" 1 106 "int8" `87 
f B "setup_timer_0" 1 106 "void(int8 mode)" `86 
v L "value" 1 107 "int8" `89 
f B "set_timer0" 1 107 "void(int8 value)" `88 
f B "get_timer0" 1 108 "int8()" `90 
v L "mode" 1 109 "int8" `92 
v L "prescaler" 1 109 "int8" `93 
f B "setup_counters" 1 109 "void(int8 mode,int8 prescaler)" `91 
v L "value" 1 110 "int8" `95 
f B "set_rtcc" 1 110 "void(int8 value)" `94 
f B "get_rtcc" 1 111 "int8()" `96  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 113 "0"
d G "T0_EXT_L_TO_H" 1 114 "32"
d G "T0_EXT_H_TO_L" 1 115 "48"
d G "T0_DIV_1" 1 117 "8"
d G "T0_DIV_2" 1 118 "0"
d G "T0_DIV_4" 1 119 "1"
d G "T0_DIV_8" 1 120 "2"
d G "T0_DIV_16" 1 121 "3"
d G "T0_DIV_32" 1 122 "4"
d G "T0_DIV_64" 1 123 "5"
d G "T0_DIV_128" 1 124 "6"
d G "T0_DIV_256" 1 125 "7"
d G "T0_8_BIT" 1 128 "0"
d G "RTCC_INTERNAL" 1 130 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 131 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 132 "48"
d G "RTCC_DIV_1" 1 133 "8"
d G "RTCC_DIV_2" 1 134 "0"
d G "RTCC_DIV_4" 1 135 "1"
d G "RTCC_DIV_8" 1 136 "2"
d G "RTCC_DIV_16" 1 137 "3"
d G "RTCC_DIV_32" 1 138 "4"
d G "RTCC_DIV_64" 1 139 "5"
d G "RTCC_DIV_128" 1 140 "6"
d G "RTCC_DIV_256" 1 141 "7"
d G "RTCC_8_BIT" 1 142 "0"
c L "get_rtcc" 1 3 8 "FUNCTION"
v L "mode" 1 153 "int16" `98 
f B "setup_wdt" 1 153 "void(int16 mode)" `97 
f B "restart_wdt" 1 154 "void()" `99  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 157 "8"
d G "WDT_36MS" 1 158 "9"
d G "WDT_72MS" 1 159 "10"
d G "WDT_144MS" 1 160 "11"
d G "WDT_288MS" 1 161 "12"
d G "WDT_576MS" 1 162 "13"
d G "WDT_1152MS" 1 163 "14"
d G "WDT_2304MS" 1 164 "15"
c L "restart_wdt" 1 3 3 "FUNCTION"
v L "mode" 1 170 "int16" `101 
f B "setup_timer_1" 1 170 "void(int16 mode)" `100 
f B "get_timer1" 1 171 "int16()" `102 
v L "value" 1 172 "int16" `104 
f B "set_timer1" 1 172 "void(int16 value)" `103  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 175 "0"
d G "T1_INTERNAL" 1 176 "5"
d G "T1_EXTERNAL" 1 177 "7"
d G "T1_EXTERNAL_SYNC" 1 178 "3"
d G "T1_CLK_OUT" 1 180 "8"
d G "T1_DIV_BY_1" 1 182 "0"
d G "T1_DIV_BY_2" 1 183 "0x10"
d G "T1_DIV_BY_4" 1 184 "0x20"
d G "T1_DIV_BY_8" 1 185 "0x30"
d G "T1_GATE" 1 187 "0x40"
d G "T1_GATE_INVERTED" 1 188 "0xC0"
c L "set_timer1" 1 3 3 "FUNCTION"
v L "mode" 1 193 "int32" `106 
f B "setup_comparator" 1 193 "void(int32 mode)" `105  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 195 "0x0ff07"
d G "NC_NC" 1 196 "0x0ff07"
d G "A0_A1" 1 197 "0x3ff02"
d G "A1_VR_OUT_ON_A2" 1 198 "0x6fb03"
d G "A1_VR" 1 199 "0x2ff04"
d G "A0_A1_OUT_ON_A2" 1 200 "0x3fb01"
d G "COMP_INVERT" 1 203 "0x10"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 209 "int8" `109 
f B "setup_vref" 1 209 "void(int8 mode)" `108  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 211 "0xa0"
d G "VREF_HIGH" 1 212 "0x80"
c L "setup_vref" 1 3 5 "FUNCTION"
v L "mode" 1 220 "int16" `111 
f B "setup_adc" 1 220 "void(int16 mode)" `110 
f B "read_adc" 1 221 "int8()" `112 
v L "mode" 1 222 "int8" `114 
f G "read_adc" 1 222 "int8(int8 mode)" `113 
f G "read_adc" 1 223 "int16()" `115 
v L "mode" 1 224 "int8" `117 
f G "read_adc" 1 224 "int16(int8 mode)" `116 
f B "adc_done" 1 225 "int8()" `118  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 227 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 228 "0x100"
d G "ADC_CLOCK_DIV_4" 1 229 "0x40"
d G "ADC_CLOCK_DIV_8" 1 230 "0x10"
d G "ADC_CLOCK_DIV_32" 1 231 "0x20"
d G "ADC_CLOCK_DIV_16" 1 232 "0x50"
d G "ADC_CLOCK_DIV_64" 1 233 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 234 "0x30" "Internal 2-6us"
c L "adc_done" 1 3 1 "FUNCTION"
v L "pins" 1 237 "int16" `120 
f B "setup_adc_ports" 1 237 "void(int16 pins)" `119 
v L "pins" 1 238 "int16" `122 
v L "reference" 1 238 "int16" `123 
f G "setup_adc_ports" 1 238 "void(int16 pins,int16 reference)" `121 
v L "channel" 1 239 "int8" `125 
f B "set_adc_channel" 1 239 "void(int8 channel)" `124  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 243 "1" "| A0"
d G "sAN1" 1 244 "2" "| A1"
d G "sAN2" 1 245 "4" "| A2"
d G "sAN3" 1 246 "8" "| A4"
d G "sAN4" 1 247 "16" "| C0"
d G "sAN5" 1 248 "32" "| C1"
d G "sAN6" 1 249 "64" "| C2"
d G "sAN7" 1 250 "128" "| C3"
d G "NO_ANALOGS" 1 251 "0" "None"
d G "ALL_ANALOG" 1 252 "255" "A0 A1 A2 A4 C0 C1 C2 C3"
d G "VSS_VDD" 1 255 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 256 "0x4000" "| Range 0-VrefH"
d G "ADC_START_AND_READ" 1 259 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 260 "1"
d G "ADC_READ_ONLY" 1 261 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
v L "x" 1 267 "sint8" `127 
f B "abs" 1 267 "sint8(sint8 x)" `126 
v L "x" 1 268 "sint16" `129 
f G "abs" 1 268 "sint16(sint16 x)" `128 
v L "x" 1 269 "sint32" `131 
f G "abs" 1 269 "sint32(sint32 x)" `130 
v L "x" 1 270 "float" `133 
f G "abs" 1 270 "float(float x)" `132 
v L "??65535" 1 271 "int8" `135 
v L "??65535" 1 271 "int8" `136 
f B "_mul" 1 271 "int16(int8 ,int8 )" `134 
v L "??65535" 1 272 "sint8" `135 
v L "??65535" 1 272 "sint8" `139 
f G "_mul" 1 272 "sint16(sint8 ,sint8 )" `137 
v L "??65535" 1 273 "int16" `135 
v L "??65535" 1 273 "int16" `142 
f G "_mul" 1 273 "int32(int16 ,int16 )" `140 
v L "??65535" 1 274 "sint16" `135 
v L "??65535" 1 274 "sint16" `145 
f G "_mul" 1 274 "sint32(sint16 ,sint16 )" `143  "Memory Manipulation Prototypes:"
v L "bank" 1 277 "int8" `147 
v L "offset" 1 277 "int8" `148 
f B "read_bank" 1 277 "int8(int8 bank,int8 offset)" `146 
v L "bank" 1 278 "int8" `150 
v L "offset" 1 278 "int8" `151 
v L "value" 1 278 "int8" `152 
f B "write_bank" 1 278 "void(int8 bank,int8 offset,int8 value)" `149 
v L "dest" 1 279 "*int8" `154 
v L "src" 1 279 "*int8" `155 
f B "strcpy" 1 279 "void(*int8 dest,*int8 src)" `153 
v L "dest" 1 280 "*int8" `157 
v L "src" 1 280 "*int8" `158 
f B "strcopy" 1 280 "void(*int8 dest,*int8 src)" `156 
v L "destination" 1 281 "*int8" `160 
v L "value" 1 281 "int8" `161 
v L "num" 1 281 "int16" `162 
f B "memset" 1 281 "void(*int8 destination,int8 value,int16 num)" `159 
v L "destination" 1 282 "*int8" `164 
v L "source" 1 282 "*int8" `165 
v L "num" 1 282 "int16" `166 
f B "memcpy" 1 282 "void(*int8 destination,*int8 source,int16 num)" `163  "String Prototypes:"
v L "cvalue" 1 285 "int8" `168 
f B "toupper" 1 285 "int8(int8 cvalue)" `167 
v L "cvalue" 1 286 "int8" `170 
f B "tolower" 1 286 "int8(int8 cvalue)" `169 
v L "string" 1 287 "*int8" `172 
v L "cstring" 1 287 "*int8" `173 
f B "sprintf" 1 287 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `171  "Data Manipulators Prototypes:"
v L "address" 1 290 "*int8" `176 
v L "bytes" 1 290 "int8" `177 
v L "value" 1 290 "int8" `178 
f B "shift_left" 1 290 "int8(*int8 address,int8 bytes,int8 value)" `175 
v L "address" 1 291 "*int8" `180 
v L "bytes" 1 291 "int8" `181 
v L "value" 1 291 "int8" `182 
f B "shift_right" 1 291 "int8(*int8 address,int8 bytes,int8 value)" `179 
v L "address" 1 292 "*int8" `184 
v L "bytes" 1 292 "int8" `185 
f B "rotate_left" 1 292 "void(*int8 address,int8 bytes)" `183 
v L "address" 1 293 "*int8" `187 
v L "bytes" 1 293 "int8" `188 
f B "rotate_right" 1 293 "void(*int8 address,int8 bytes)" `186 
v L "value" 1 294 "int8" `190 
f B "swap" 1 294 "void(int8 value)" `189 
v L "var" 1 295 "int16" `192 
v L "offset" 1 295 "int8" `193 
f B "make8" 1 295 "int8(int16 var,int8 offset)" `191 
v L "var" 1 296 "int32" `192 
v L "offset" 1 296 "int8" `196 
f G "make8" 1 296 "int8(int32 var,int8 offset)" `194 
v L "varhigh" 1 297 "int8" `198 
v L "varlow" 1 297 "int8" `199 
f B "make16" 1 297 "int16(int8 varhigh,int8 varlow)" `197 
v L "var1" 1 298 "int16" `201 
f B "make32" 1 298 "int32(int16 var1)" `200 
v L "var1" 1 299 "int16" `203 
v L "var2" 1 299 "int16" `204 
f G "make32" 1 299 "int32(int16 var1,int16 var2)" `202 
v L "var1" 1 300 "int16" `203 
v L "var2" 1 300 "int8" `207 
f G "make32" 1 300 "int32(int16 var1,int8 var2)" `205 
v L "var1" 1 301 "int16" `209 
v L "var2" 1 301 "int8" `210 
v L "var3" 1 301 "int8" `211 
f G "make32" 1 301 "int32(int16 var1,int8 var2,int8 var3)" `208 
v L "var1" 1 302 "int8" `213 
f G "make32" 1 302 "int32(int8 var1)" `212 
v L "var1" 1 303 "int8" `203 
v L "var2" 1 303 "int8" `216 
f G "make32" 1 303 "int32(int8 var1,int8 var2)" `214 
v L "var1" 1 304 "int8" `209 
v L "var2" 1 304 "int8" `210 
v L "var3" 1 304 "int8" `220 
f G "make32" 1 304 "int32(int8 var1,int8 var2,int8 var3)" `217 
v L "var1" 1 305 "int8" `222 
v L "var2" 1 305 "int8" `223 
v L "var3" 1 305 "int8" `224 
v L "var4" 1 305 "int8" `225 
f G "make32" 1 305 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `221 
v L "var1" 1 306 "int8" `203 
v L "var2" 1 306 "int16" `228 
f G "make32" 1 306 "int32(int8 var1,int16 var2)" `226 
v L "var1" 1 307 "int8" `209 
v L "var2" 1 307 "int16" `210 
v L "var3" 1 307 "int8" `232 
f G "make32" 1 307 "int32(int8 var1,int16 var2,int8 var3)" `229 
v L "var1" 1 308 "int8" `209 
v L "var2" 1 308 "int8" `210 
v L "var3" 1 308 "int16" `236 
f G "make32" 1 308 "int32(int8 var1,int8 var2,int16 var3)" `233 
v L "var" 1 309 "int8" `238 
v L "bit" 1 309 "int8" `239 
f B "bit_set" 1 309 "void(int8 var,int8 bit)" `237 
v L "var" 1 310 "int16" `238 
v L "bit" 1 310 "int8" `242 
f G "bit_set" 1 310 "void(int16 var,int8 bit)" `240 
v L "var" 1 311 "int32" `238 
v L "bit" 1 311 "int8" `245 
f G "bit_set" 1 311 "void(int32 var,int8 bit)" `243 
v L "var" 1 312 "int8" `247 
v L "bit" 1 312 "int8" `248 
f B "bit_clear" 1 312 "void(int8 var,int8 bit)" `246 
v L "var" 1 313 "int16" `247 
v L "bit" 1 313 "int8" `251 
f G "bit_clear" 1 313 "void(int16 var,int8 bit)" `249 
v L "var" 1 314 "int32" `247 
v L "bit" 1 314 "int8" `254 
f G "bit_clear" 1 314 "void(int32 var,int8 bit)" `252 
v L "var" 1 315 "int8" `256 
v L "bit" 1 315 "int8" `257 
f B "bit_test" 1 315 "int8(int8 var,int8 bit)" `255 
v L "var" 1 316 "int16" `256 
v L "bit" 1 316 "int8" `260 
f G "bit_test" 1 316 "int8(int16 var,int8 bit)" `258 
v L "var" 1 317 "int32" `256 
v L "bit" 1 317 "int8" `263 
f G "bit_test" 1 317 "int8(int32 var,int8 bit)" `261  "#use delay() Prototypes:"
v L "count" 1 320 "int8" `265 
f B "delay_cycles" 1 320 "void(int8 count)" `264 
v L "time" 1 321 "int16" `267 
f B "delay_ms" 1 321 "void(int16 time)" `266 
v L "time" 1 322 "int16" `269 
f B "delay_us" 1 322 "void(int16 time)" `268  "#use rs232() Prototypes:"
v L "cdata" 1 325 "int8" `271 
f B "putchar" 1 325 "void(int8 cdata)" `270 
v L "cdata" 1 326 "int8" `273 
v L "stream" 1 326 "int8" `274 
f G "putchar" 1 326 "void(int8 cdata,int8 stream)" `272 
v L "string" 1 327 "*int8" `276 
f B "puts" 1 327 "void(*int8 string)" `275 
v L "string" 1 328 "*int8" `278 
v L "stream" 1 328 "int8" `279 
f G "puts" 1 328 "void(*int8 string,int8 stream)" `277 
f B "getch" 1 329 "int8()" `280 
v L "stream" 1 330 "int8" `282 
f G "getch" 1 330 "int8(int8 stream)" `281 
v L "string" 1 331 "*int8" `284 
f B "gets" 1 331 "void(*int8 string)" `283 
v L "string" 1 332 "*int8" `286 
v L "stream" 1 332 "int8" `287 
f G "gets" 1 332 "void(*int8 string,int8 stream)" `285 
f B "kbhit" 1 333 "int8()" `288 
v L "stream" 1 334 "int8" `290 
f G "kbhit" 1 334 "int8(int8 stream)" `289 
v L "string" 1 335 "*int8" `292 
f B "printf" 1 335 "void(*int8 string,*int8 _VA_LIST)" `291 
v L "stream" 1 336 "int8" `295 
v L "string" 1 336 "*int8" `296 
f B "fprintf" 1 336 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `294 
f B "putc_send" 1 337 "void()" `298 
v L "stream" 1 338 "int8" `300 
f B "fputc_send" 1 338 "void(int8 stream)" `299 
f B "rcv_buffer_full" 1 339 "int8()" `301 
v L "stream" 1 340 "int8" `303 
f G "rcv_buffer_full" 1 340 "int8(int8 stream)" `302 
f B "rcv_buffer_bytes" 1 341 "int16()" `304 
v L "stream" 1 342 "int8" `306 
f G "rcv_buffer_bytes" 1 342 "int16(int8 stream)" `305 
f B "tx_buffer_full" 1 343 "int8()" `307 
v L "stream" 1 344 "int8" `309 
f G "tx_buffer_full" 1 344 "int8(int8 stream)" `308 
f B "tx_buffer_bytes" 1 345 "int16()" `310 
v L "stream" 1 346 "int8" `312 
f G "tx_buffer_bytes" 1 346 "int16(int8 stream)" `311  "#use i2c() Prototypes:"
f B "i2c_read" 1 349 "int8()" `313 
v L "stream" 1 350 "int8" `315 
f G "i2c_read" 1 350 "int8(int8 stream)" `314 
v L "stream" 1 351 "int8" `317 
v L "ack" 1 351 "int8" `318 
f G "i2c_read" 1 351 "int8(int8 stream,int8 ack)" `316 
v L "data" 1 352 "int8" `320 
f B "i2c_write" 1 352 "int8(int8 data)" `319 
v L "stream" 1 353 "int8" `322 
v L "data" 1 353 "int8" `323 
f G "i2c_write" 1 353 "int8(int8 stream,int8 data)" `321 
f B "i2c_start" 1 354 "void()" `324 
v L "stream" 1 355 "int8" `326 
f G "i2c_start" 1 355 "void(int8 stream)" `325 
v L "stream" 1 356 "int8" `328 
v L "restart" 1 356 "int8" `329 
f G "i2c_start" 1 356 "void(int8 stream,int8 restart)" `327 
f B "i2c_stop" 1 357 "void()" `330 
v L "stream" 1 358 "int8" `332 
f G "i2c_stop" 1 358 "void(int8 stream)" `331 
f B "i2c_isr_state" 1 359 "int8()" `333 
v L "addr" 1 360 "int8" `335 
f B "i2c_slaveaddr" 1 360 "void(int8 addr)" `334 
v L "stream" 1 361 "int8" `337 
v L "addr" 1 361 "int8" `338 
f G "i2c_slaveaddr" 1 361 "void(int8 stream,int8 addr)" `336 
f B "i2c_poll" 1 362 "int8()" `339 
v L "stream" 1 363 "int8" `341 
f G "i2c_poll" 1 363 "int8(int8 stream)" `340 
v L "baud" 1 364 "int32" `343 
f B "i2c_init" 1 364 "void(int32 baud)" `342 
v L "stream" 1 365 "int8" `345 
v L "baud" 1 365 "int32" `346 
f G "i2c_init" 1 365 "void(int8 stream,int32 baud)" `344  "#use spi() Prototypes:"
f B "spi_xfer" 1 368 "int8()" `347 
f G "spi_xfer" 1 369 "int16()" `348 
f G "spi_xfer" 1 370 "int32()" `349 
v L "data" 1 371 "int8" `351 
f G "spi_xfer" 1 371 "int8(int8 data)" `350 
v L "data" 1 372 "int16" `353 
f G "spi_xfer" 1 372 "int16(int16 data)" `352 
v L "data" 1 373 "int32" `355 
f G "spi_xfer" 1 373 "int32(int32 data)" `354 
v L "stream" 1 374 "int8" `357 
v L "data" 1 374 "int8" `358 
f G "spi_xfer" 1 374 "int8(int8 stream,int8 data)" `356 
v L "stream" 1 375 "int8" `357 
v L "data" 1 375 "int16" `361 
f G "spi_xfer" 1 375 "int16(int8 stream,int16 data)" `359 
v L "stream" 1 376 "int8" `357 
v L "data" 1 376 "int32" `364 
f G "spi_xfer" 1 376 "int32(int8 stream,int32 data)" `362 
v L "stream" 1 377 "int8" `366 
v L "data" 1 377 "int8" `367 
v L "bits" 1 377 "int8" `368 
f G "spi_xfer" 1 377 "int8(int8 stream,int8 data,int8 bits)" `365 
v L "stream" 1 378 "int8" `366 
v L "data" 1 378 "int16" `367 
v L "bits" 1 378 "int8" `372 
f G "spi_xfer" 1 378 "int16(int8 stream,int16 data,int8 bits)" `369 
v L "stream" 1 379 "int8" `366 
v L "data" 1 379 "int32" `367 
v L "bits" 1 379 "int8" `376 
f G "spi_xfer" 1 379 "int32(int8 stream,int32 data,int8 bits)" `373 
v L "baud" 1 380 "int32" `378 
f B "spi_init" 1 380 "void(int32 baud)" `377 
v L "stream" 1 381 "int8" `380 
v L "baud" 1 381 "int32" `381 
f G "spi_init" 1 381 "void(int8 stream,int32 baud)" `379 
v L "baud" 1 382 "int32" `383 
f B "spi_speed" 1 382 "void(int32 baud)" `382 
v L "stream" 1 383 "int8" `385 
v L "baud" 1 383 "int32" `386 
f G "spi_speed" 1 383 "void(int8 stream,int32 baud)" `384 
v L "stream" 1 384 "int8" `388 
v L "baud" 1 384 "int32" `389 
v L "clock" 1 384 "int32" `390 
f G "spi_speed" 1 384 "void(int8 stream,int32 baud,int32 clock)" `387 
v L "data" 1 385 "int8" `392 
f B "spi_prewrite" 1 385 "void(int8 data)" `391 
v L "data" 1 386 "int16" `394 
f G "spi_prewrite" 1 386 "void(int16 data)" `393 
v L "data" 1 387 "int32" `396 
f G "spi_prewrite" 1 387 "void(int32 data)" `395 
v L "??65535" 1 388 "int8" `398 
v L "data" 1 388 "int8" `399 
f G "spi_prewrite" 1 388 "void(int8 ,int8 data)" `397 
v L "??65535" 1 389 "int8" `398 
v L "data" 1 389 "int16" `402 
f G "spi_prewrite" 1 389 "void(int8 ,int16 data)" `400 
v L "??65535" 1 390 "int8" `398 
v L "data" 1 390 "int32" `405 
f G "spi_prewrite" 1 390 "void(int8 ,int32 data)" `403 
f B "spi_xfer_in" 1 391 "int8()" `406 
f G "spi_xfer_in" 1 392 "int16()" `407 
f G "spi_xfer_in" 1 393 "int32()" `408 
v L "bits" 1 394 "int8" `410 
f G "spi_xfer_in" 1 394 "int8(int8 bits)" `409 
v L "bits" 1 395 "int8" `412 
f G "spi_xfer_in" 1 395 "int16(int8 bits)" `411 
v L "bits" 1 396 "int8" `414 
f G "spi_xfer_in" 1 396 "int32(int8 bits)" `413 
v L "stream" 1 397 "int8" `416 
v L "bits" 1 397 "int8" `417 
f G "spi_xfer_in" 1 397 "int8(int8 stream,int8 bits)" `415 
v L "stream" 1 398 "int8" `416 
v L "bits" 1 398 "int8" `420 
f G "spi_xfer_in" 1 398 "int16(int8 stream,int8 bits)" `418 
v L "stream" 1 399 "int8" `416 
v L "bits" 1 399 "int8" `423 
f G "spi_xfer_in" 1 399 "int32(int8 stream,int8 bits)" `421  "#use rtos() Prototypes:"
f B "rtos_run" 1 402 "void()" `424 
f B "rtos_yield" 1 403 "void()" `425 
v L "task" 1 404 "int8" `427 
f B "rtos_enable" 1 404 "void(int8 task)" `426 
v L "task" 1 405 "int8" `429 
f B "rtos_disable" 1 405 "void(int8 task)" `428 
f B "rtos_terminate" 1 406 "void()" `430 
v L "flag" 1 407 "int8" `432 
f B "rtos_await" 1 407 "void(int8 flag)" `431 
v L "sem" 1 408 "int8" `434 
f B "rtos_wait" 1 408 "void(int8 sem)" `433 
v L "sem" 1 409 "int8" `436 
f B "rtos_signal" 1 409 "void(int8 sem)" `435 
v L "task" 1 410 "int8" `438 
v L "msg" 1 410 "int8" `439 
f B "rtos_msg_send" 1 410 "void(int8 task,int8 msg)" `437 
f B "rtos_msg_read" 1 411 "int8()" `440 
f B "rtos_msg_poll" 1 412 "int8()" `441 
v L "task" 1 413 "int8" `443 
f B "rtos_overrun" 1 413 "int8(int8 task)" `442 
v L "task" 1 414 "int8" `445 
v L "stat" 1 414 "*int8" `446 
f B "rtos_stats" 1 414 "void(int8 task,*int8 stat)" `444  "#use timer() Prototypes:"
f B "get_ticks" 1 417 "int8()" `447 
f G "get_ticks" 1 418 "int16()" `448 
f G "get_ticks" 1 419 "int32()" `449 
v L "stream" 1 420 "int8" `451 
f G "get_ticks" 1 420 "int8(int8 stream)" `450 
v L "stream" 1 421 "int8" `453 
f G "get_ticks" 1 421 "int16(int8 stream)" `452 
v L "stream" 1 422 "int8" `455 
f G "get_ticks" 1 422 "int32(int8 stream)" `454 
v L "value" 1 423 "int8" `457 
f B "set_ticks" 1 423 "void(int8 value)" `456 
v L "value" 1 424 "int16" `459 
f G "set_ticks" 1 424 "void(int16 value)" `458 
v L "value" 1 425 "int32" `461 
f G "set_ticks" 1 425 "void(int32 value)" `460 
v L "stream" 1 426 "int8" `463 
v L "value" 1 426 "int8" `464 
f G "set_ticks" 1 426 "void(int8 stream,int8 value)" `462 
v L "stream" 1 427 "int8" `463 
v L "value" 1 427 "int16" `467 
f G "set_ticks" 1 427 "void(int8 stream,int16 value)" `465 
v L "stream" 1 428 "int8" `463 
v L "value" 1 428 "int32" `470 
f G "set_ticks" 1 428 "void(int8 stream,int32 value)" `468  "#use pwm() Prototypes:"
f B "pwm_on" 1 431 "void()" `471 
v L "stream" 1 432 "int8" `473 
f G "pwm_on" 1 432 "void(int8 stream)" `472 
f B "pwm_off" 1 433 "void()" `474 
v L "stream" 1 434 "int8" `476 
f G "pwm_off" 1 434 "void(int8 stream)" `475 
v L "duty" 1 435 "int16" `478 
f B "pwm_set_duty" 1 435 "void(int16 duty)" `477 
v L "stream" 1 436 "int8" `480 
v L "duty" 1 436 "int16" `481 
f G "pwm_set_duty" 1 436 "void(int8 stream,int16 duty)" `479 
v L "percent" 1 437 "int16" `483 
f B "pwm_set_duty_percent" 1 437 "void(int16 percent)" `482 
v L "stream" 1 438 "int8" `485 
v L "percent" 1 438 "int16" `486 
f G "pwm_set_duty_percent" 1 438 "void(int8 stream,int16 percent)" `484 
v L "frequency" 1 439 "int32" `488 
f B "pwm_set_frequency" 1 439 "void(int32 frequency)" `487 
v L "stream" 1 440 "int8" `490 
v L "frequency" 1 440 "int32" `491 
f G "pwm_set_frequency" 1 440 "void(int8 stream,int32 frequency)" `489  "#use capture() Prototypes:"
f B "get_capture_time" 1 443 "int16()" `492 
v L "stream" 1 444 "int8" `494 
f G "get_capture_time" 1 444 "int16(int8 stream)" `493 
f B "get_capture_event" 1 445 "int8()" `495 
v L "stream" 1 446 "int8" `497 
f G "get_capture_event" 1 446 "int8(int8 stream)" `496  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 459 "int16" `499 
f B "goto_address" 1 459 "void(int16 address)" `498 
v L "label" 1 460 "int16" `501 
f B "label_address" 1 460 "int16(int16 label)" `500  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 467 "int8" `502 
v L "address" 1 470 "__EEADDRESS__" `504 
f B "read_eeprom" 1 470 "int8(__EEADDRESS__ address)" `503 
v L "address" 1 471 "__EEADDRESS__" `506 
v L "value" 1 471 "int8" `507 
f B "write_eeprom" 1 471 "void(__EEADDRESS__ address,int8 value)" `505  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
v L "interrupt" 1 478 "int32" `509 
f B "enable_interrupts" 1 478 "void(int32 interrupt)" `508 
v L "interrupt" 1 479 "int32" `511 
f B "disable_interrupts" 1 479 "void(int32 interrupt)" `510 
v L "interrupt" 1 480 "int32" `513 
f B "clear_interrupt" 1 480 "void(int32 interrupt)" `512 
v L "interrupt" 1 481 "int32" `515 
f B "interrupt_active" 1 481 "int8(int32 interrupt)" `514 
v L "interrupt" 1 482 "int32" `517 
f B "interrupt_enabled" 1 482 "int8(int32 interrupt)" `516 
v L "source" 1 483 "int8" `519 
v L "edge" 1 483 "int8" `520 
f B "ext_int_edge" 1 483 "void(int8 source,int8 edge)" `518 
v L "address" 1 484 "int16" `522 
f B "jump_to_irs" 1 484 "void(int16 address)" `521  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 486 "0x40"
d G "H_TO_L" 1 487 "0"
d G "GLOBAL" 1 489 "0x0BC0"
d G "PERIPH" 1 490 "0x0B40"
d G "INT_RTCC" 1 491 "0x000B20"
d G "INT_EXT_L2H" 1 492 "0x50000B10"
d G "INT_EXT_H2L" 1 493 "0x60000B10"
d G "INT_EXT" 1 494 "0x000B10"
d G "INT_AD" 1 495 "0x008C40"
d G "INT_TIMER1" 1 496 "0x008C01"
d G "INT_TIMER0" 1 497 "0x000B20"
d G "INT_EEPROM" 1 498 "0x008C80"
d G "INT_COMP" 1 499 "0x008C08"
d G "INT_RA" 1 500 "0x00FF0B08"
d G "INT_RA0" 1 501 "0x0010B08"
d G "INT_RA1" 1 502 "0x0020B08"
d G "INT_RA2" 1 503 "0x0040B08"
d G "INT_RA3" 1 504 "0x0080B08"
d G "INT_RA4" 1 505 "0x0100B08"
d G "INT_RA5" 1 506 "0x0200B08"
D G "button" 0 10 "PIN_A4"
D G "Grillbutton" 0 11 "PIN_A1"
D G "ledH" 0 13 "PIN_C5"
D G "ledM" 0 14 "PIN_C4"
D G "ledL" 0 15 "PIN_C3"
D G "ledG" 0 16 "PIN_A0"
D G "time1" 0 17 "PIN_C2"
D G "time2" 0 18 "PIN_C1"
D G "time3" 0 19 "PIN_C0"
D G "buz" 0 20 "PIN_A5"
V G "H" 0 21 "int1" `527 
V G "M" 0 21 "int1" `528 
V G "L" 0 21 "int1" `529 
V G "G" 0 21 "int1" `530 
V G "t1" 0 21 "int1" `531 
V G "t2" 0 21 "int1" `532 
V G "t3" 0 21 "int1" `533 
V G "C" 0 21 "int1" `534 
V G "nec_ok" 0 22 "int1" `535 
V G "nec_state" 0 23 "int8" `536 
V G "i" 0 23 "int8" `537 
V G "nec_code" 0 24 "int8" `538 
V G "delays" 0 25 "int16" `539 
V G "count" 0 25 "int16" `540 
V G "value" 0 26 "int8" `541 
V G "check" 0 26 "int8" `542 
f G "off" 0 27 "void()" `543 
f G "timeron" 0 28 "void()" `544 
f G "timeroff" 0 29 "void()" `545  "#INT_TIMER0"
C L "timeroff" 0 32 7 "FUNCTION"
F G "Timer0_isr" 0 46 "void()" `546 
C L "Timer0_isr" 0 32 1 "FUNCTION"
F G "ext_isr" 0 58 "void()" `547 
V L "time" 0 59 "int16" `548 
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
C L "ext_isr" 0 32 1 "FUNCTION"
F G "timer1_isr" 0 122 "void()" `550 
C L "timer1_isr" 0 32 1 "FUNCTION"
C L "timer1_isr" 0 32 1 "FUNCTION"
C L "timer1_isr" 0 32 1 "FUNCTION"
C L "timer1_isr" 0 32 1 "FUNCTION"
F G "write" 0 130 "void()" `551 
F G "buzz" 0 137 "void()" `552 
F G "output" 0 142 "void()" `553 
F G "sbut" 0 154 "void()" `554 
F G "Gbut" 0 178 "void()" `555 
F G "off" 0 190 "void()" `543 
F G "high" 0 201 "void()" `556 
F G "med" 0 209 "void()" `557 
F G "low" 0 216 "void()" `558 
F G "times" 0 223 "void()" `559 
F G "timeron" 0 230 "void()" `544  "OPTION_REG = 0x07;"
F G "timeroff" 0 239 "void()" `545 
F G "Init" 0 248 "void()" `560 
C L "Init" 0 32 1 "FUNCTION"
C L "Init" 0 32 1 "FUNCTION"
C L "Init" 0 32 1 "FUNCTION"
F G "MAIN" 0 265 "void()" `561 
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
C L "MAIN" 0 32 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
