#include <16F676.h>
#fuses HS
#fuses PUT
#fuses INTRC_IO
#FUSES NOWDT                    //No Watch Dog Timer
#FUSES NOMCLR                   //Master Clear pin used for I/O
#FUSES NOBROWNOUT               //No brownout reset
#use delay (clock=4Mhz)

#define ledH PIN_C5
#define ledM PIN_C4
#define ledL PIN_C3
#define ledG PIN_A0
#define time1 PIN_C2
#define time2 PIN_C1
#define time3 PIN_C0
#define buz PIN_A5

int1 H,M,L,G,t1,t2,t3,C;
int1 nec_ok = 0;
unsigned int8 nec_state = 0, command, inv_command, i;
unsigned int16 address;
unsigned int32 nec_code;
char value,check;
void off();
void timeron();
void timeroff();
#INT_EXT                                         // External interrupt
void ext_isr(void){
  unsigned int16 time;
  if(nec_state != 0){
    time = get_timer1();                         // Store Timer1 value
    set_timer1(0);                               // Reset Timer1
  }
  switch(nec_state){
    case 0 :                                     // Start receiving IR data (we're at the beginning of 9ms pulse)
      setup_timer_1( T1_INTERNAL | T1_DIV_BY_2 );   // Enable Timer1 module with internal clock source and prescaler = 2
      set_timer1(0);                             // Reset Timer1 value
      nec_state = 1;                             // Next state: end of 9ms pulse (start of 4.5ms space)
      i = 0;
      ext_int_edge( L_TO_H );                    // Toggle external interrupt edge
      return;
    case 1 :                                     // End of 9ms pulse
      if((time > 4750) || (time < 4250)){        // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Stop Timer1 module
      }
      else
        nec_state = 2;                           // Next state: end of 4.5ms space (start of 562탎 pulse)
      ext_int_edge( H_TO_L );                    // Toggle external interrupt edge
      return;
    case 2 :                                     // End of 4.5ms space
      if((time > 2500) || (time < 2000)){        // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Stop Timer1 module
        return;
      }
      nec_state = 3;                             // Next state: end of 562탎 pulse (start of 562탎 or 1687탎 space)
      ext_int_edge( L_TO_H );                    // Toggle external interrupt edge
      return;
    case 3 :                                     // End of 562탎 pulse
      if((time > 350) || (time < 200)){          // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Disable Timer1 module
      }
      else
        nec_state = 4;                           // Next state: end of 562탎 or 1687탎 space
      ext_int_edge( H_TO_L );                    // Toggle external interrupt edge
      return;
    case 4 :                                     // End of 562탎 or 1687탎 space
      if((time > 900) || (time < 200)){         // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Disable Timer1 module
        return;
      }
      if( time > 500)                           // If space width > 1ms (short space)
        bit_set(nec_code, (31 - i));             // Write 1 to bit (31 - i)
      else                                       // If space width < 1ms (long space)
        bit_clear(nec_code, (31 - i));           // Write 0 to bit (31 - i)
      i++;
      if(i > 31){                                // If all bits are received
        nec_ok = 1;                              // Decoding process OK
        disable_interrupts(INT_EXT);             // Disable the external interrupt
      }
      nec_state = 3;                             // Next state: end of 562탎 pulse (start of 562탎 or 1687탎 space)
      ext_int_edge( L_TO_H );                    // Toggle external interrupt edge
  }
}
#INT_TIMER1                                      // Timer1 interrupt (used for time out)
void timer1_isr(void){
  nec_state = 0;                                 // Reset decoding process
  ext_int_edge( H_TO_L );                        // External interrupt edge from high to low
  setup_timer_1(T1_DISABLED);                    // Disable Timer1 module
  clear_interrupt(INT_TIMER1);                   // Clear Timer1 interrupt flag bit
}

void buzz()
{
              buz=1;
          delay_ms(100);
          buz=0;
}

void off()
{   
    
    H=0;
    M=0;
    L=0;
    G=0;
    timeroff();
    buz=0;
}

void output(){
    ledH = H;
    ledM = M;
    ledL = L;
    ledG=G;
    
}

void Init()
{
 // OPTION_REG = 0x07;
 // OSCCAL =0x2F;
 // CMCON = 7;
 // ANSEL = 0x00;      // configure all PORTA pins as digital 
 // TRISAbits.TRISA4 = 1;
 // TRISAbits.TRISA0 = 0;
 // TRISAbits.TRISA1 = 1;
 // TRISAbits.TRISA5 = 0;
 // TRISCbits.TRISC4 = 0;
 //  TRISCbits.TRISC0 = 0;
  // TRISCbits.TRISC1 = 0;
  // TRISCbits.TRISC2 = 0;
  // TRISCbits.TRISC3 = 0;
  // TRISCbits.TRISC5 = 0;
  
   clear_interrupt(INT_TIMER1);       // clear Timer1 overflow interrupt flag bit
   clear_interrupts(INT_EXT_H2L);    // clear PORTA change interrupt flag bit
   enable_interrupt(INT_TIMER1);      // enable Timer1 overflow interrupt
  setup_timer_1( T1_INTERNAL | T1_DIV_BY_2 ); // 0b00010000    set Timer1 clock source to internal with 1:2 prescaler (Timer1 clock = 1MHz)
  enable_interrupts(GLOBAL);                     // Enable global interrupts
  enable_interrupts(INT_EXT_H2L);               // enable global, peripheral and PORTA change interrupts
  //IOCA2  = 1;     // enable RA2 pin change interrupt
 // nec_ok = 0;
 // nec_state = 0; 
  off();
  value=EEPROM_READ(0x01);
      G=EEPROM_READ(0x02);
      check=value;
      C=G;
      buzz();
}



void main(){
  Init();
                 // Enable external interrupt
  clear_interrupt(INT_TIMER1);                   // Clear Timer1 interrupt flag bit
  enable_interrupts(INT_TIMER1);                 // Enable Timer1 interrupt
  
  while(TRUE){  
  
    if(nec_ok){                                  // If the mcu successfully receives NEC protocol message
      nec_ok = 0;                                // Reset decoding process
      nec_state = 0;
      setup_timer_1(T1_DISABLED);                // Disable Timer1 module
      address = nec_code >> 16;
      command = nec_code >> 8;
      inv_command = nec_code;
      enable_interrupts(INT_EXT_H2L);            // Enable external interrupt
      
      if(nec_code==0x807F01FE)
      {
      OUTPUT_toggle(PIN_C3);
      }
    }
  }
}
