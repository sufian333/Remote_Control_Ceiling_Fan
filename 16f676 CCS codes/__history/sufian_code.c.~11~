#include <16F676.h>
#fuses HS
#fuses PUT
#fuses INTRC_IO
#FUSES NOWDT                    //No Watch Dog Timer
#FUSES NOMCLR                   //Master Clear pin used for I/O
#FUSES NOBROWNOUT               //No brownout reset
#use delay (clock=4Mhz)
 
short nec_ok = 0;
unsigned int8 nec_state = 0, bit_n;
unsigned int8 nec_code;
#INT_EXT                                         // External interrupt
void ext_isr(void){
  unsigned int16 time;
  if(nec_state != 0){
    time = get_timer1();                         // Store Timer1 value
    set_timer1(0);                               // Reset Timer1
  }
  switch(nec_state){
    case 0 :                                     // Start receiving IR data (we're at the beginning of 9ms pulse)
      setup_timer_1( T1_INTERNAL | T1_DIV_BY_2 );   // Enable Timer1 module with internal clock source and prescaler = 2
      set_timer1(0);                             // Reset Timer1 value
      nec_state = 1;                             // Next state: end of 9ms pulse (start of 4.5ms space)
      bit_n = 0;
      ext_int_edge( L_TO_H );                    // Toggle external interrupt edge
      return;
    case 1 :                                     // End of 9ms pulse
      if((time > 4750) || (time < 4250)){        // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Stop Timer1 module
      }
      else
        nec_state = 2;                           // Next state: end of 4.5ms space (start of 562탎 pulse)
      ext_int_edge( H_TO_L );                    // Toggle external interrupt edge
      return;
    case 2 :                                     // End of 4.5ms space
      if((time > 2500) || (time < 2000)){        // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Stop Timer1 module
        return;
      }
      nec_state = 3;                             // Next state: end of 562탎 pulse (start of 562탎 or 1687탎 space)
      ext_int_edge( L_TO_H );                    // Toggle external interrupt edge
      return;
    case 3 :                                     // End of 562탎 pulse
      if((time > 350) || (time < 200)){          // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Disable Timer1 module
      }
      else
        nec_state = 4;                           // Next state: end of 562탎 or 1687탎 space
      ext_int_edge( H_TO_L );                    // Toggle external interrupt edge
      return;
    case 4 :                                     // End of 562탎 or 1687탎 space
      if((time > 900) || (time < 200)){         // Invalid interval ==> stop decoding and reset
        nec_state = 0;                           // Reset decoding process
        setup_timer_1(T1_DISABLED);              // Disable Timer1 module
       // return;
      }
      else
      {
         if(bit_n>23)
        { 
      
      if( time > 500)                           // If space width > 1ms (short space)
        bit_set(nec_code, (31 - bit_n));             // Write 1 to bit (31 - i)
      else                                       // If space width < 1ms (long space)
        bit_clear(nec_code, (31 - bit_n));           // Write 0 to bit (31 - i)
        } 
      bit_n++;
      if(bit_n > 31){                                // If all bits are received
        nec_ok = 1;                              // Decoding process OK
        disable_interrupts(INT_EXT);             // Disable the external interrupt
      }
      else
      {
      nec_state = 3;                             // Next state: end of 562탎 pulse (start of 562탎 or 1687탎 space)
      ext_int_edge( L_TO_H ); 
      }// Toggle external interrupt edge
      return;
  }
}
}
#INT_TIMER1                                      // Timer1 interrupt (used for time out)
void timer1_isr(void){
  nec_state = 0;                                 // Reset decoding process
  ext_int_edge( H_TO_L );                        // External interrupt edge from high to low
  setup_timer_1(T1_DISABLED);                    // Disable Timer1 module
  clear_interrupt(INT_TIMER1);                   // Clear Timer1 interrupt flag bit
}
void main(){
  enable_interrupts(GLOBAL);                     // Enable global interrupts
  enable_interrupts(INT_EXT_H2L);                // Enable external interrupt
  clear_interrupt(INT_TIMER1);                   // Clear Timer1 interrupt flag bit
  enable_interrupts(INT_TIMER1);                 // Enable Timer1 interrupt
  
  while(TRUE){  
  
    while(!nec_ok)               // If the mcu successfully receives NEC protocol message
    {                                  
      OUTPUT_HIGH(PIN_C3);
   
      
    }
    
    
    nec_ok = 0;                                // Reset decoding process
      nec_state = 0;
      setup_timer_1(T1_DISABLED);                // Disable Timer1 module
      enable_interrupts(INT_EXT_H2L);            // Enable external interrupt
      
      if(nec_code==0xFE)
      {
      OUTPUT_toggle(PIN_C4);
      }
    
  }
}
